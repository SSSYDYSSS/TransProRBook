# Enrichment ggtree
::: {.callout-tip}
This image showcases an integrated scientific visualization, <b style="color: #6a926b;">centralizing a circular phylogenetic tree with annotated nodes, surrounded by associated heatmaps and bar charts that represent gene expression data and functional pathway enrichments.</b>
:::

```{r setup, include=FALSE}
library(TransProR)
library(ggtree)
library(ggtreeExtra)
library(org.Hs.eg.db)
library(clusterProfiler)
library(ReactomePA)
library(DOSE)
library(dplyr)
library(ggplot2)
library(ggnewscale)
```



```r 
library(TransProR)
library(ggtree)
library(ggtreeExtra)
library(org.Hs.eg.db)
library(clusterProfiler)
library(ReactomePA)
library(dplyr)
library(ggplot2)
library(ggnewscale)
```

## Load data
```{r}
tumor <- readRDS("../test_TransProR/generated_data1/removebatch_SKCM_Skin_TCGA_exp_tumor.rds")
normal <- readRDS('../test_TransProR/generated_data1/removebatch_SKCM_Skin_Normal_TCGA_GTEX_count.rds')
# Merge the datasets, ensuring both have genes as row names
all_count_exp <- merge(tumor, normal, by = "row.names")
all_count_exp <- tibble::column_to_rownames(all_count_exp, var = "Row.names")  # Set the row names

# Drawing data
all_count_exp <- log_transform(all_count_exp)
DEG_deseq2 <- readRDS('../test_TransProR/Select DEGs/DEG_deseq2.Rdata')
#head(all_count_exp, 1)
head(DEG_deseq2, 5)
```

## Convert from SYMBOL to ENTREZID
```{r}
# Convert from SYMBOL to ENTREZID for convenient enrichment analysis later. It's crucial to do this now as a direct conversion may result in a reduced set of genes due to non-one-to-one correspondence.

# DEG_deseq2
# Retrieve gene list
gene <- rownames(DEG_deseq2)
# Perform conversion
gene = bitr(gene, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
# Remove duplicates and merge
gene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)
# Extract the SYMBOL column as a vector from the first dataset
symbols_vector <- gene$SYMBOL
# Use the SYMBOL column to filter corresponding rows from the second dataset by row names
DEG_deseq2 <- DEG_deseq2[rownames(DEG_deseq2) %in% symbols_vector, ]
head(DEG_deseq2, 5)
```

## Select differentially expressed genes
```{r}
Diff_deseq2 <- filter_diff_genes(
  DEG_deseq2, 
  p_val_col = "pvalue", 
  log_fc_col = "log2FoldChange",
  p_val_threshold = 0.01, 
  log_fc_threshold = 9.1
  )
# First, obtain a list of gene names from the row names of the first dataset
gene_names <- rownames(Diff_deseq2)
# Find the matching rows in the second dataframe
matched_rows <- all_count_exp[gene_names, ]
# Calculate the mean for each row
averages <- rowMeans(matched_rows, na.rm = TRUE)
# Append the averages as a new column to the first dataframe
Diff_deseq2$average <- averages
Diff_deseq2$ID <- rownames(Diff_deseq2)
Diff_deseq2$changetype <- ifelse(Diff_deseq2$change == 'up', 1, -1)
# Define a small threshold value
small_value <- .Machine$double.xmin
# Before calculating -log10, replace zeroes with the small threshold value and assign it to a new column
Diff_deseq2$log_pvalue <- ifelse(Diff_deseq2$pvalue == 0, -log10(small_value), -log10(Diff_deseq2$pvalue))
# Extract the expression data corresponding to the differentially expressed genes
heatdata_deseq2 <- all_count_exp[rownames(Diff_deseq2), ]
#head(heatdata_deseq2, 1)
```


## Process heatdata for ggtree plotting
```{r}
set.seed(123)
HeatdataDeseq2 <- process_heatdata(
  heatdata_deseq2, 
  selection = 2, 
  custom_names = NULL, 
  num_names_per_group = 4, 
  prefix_length = 4
  )
head(HeatdataDeseq2, 5)
```


## Check nodes requiring staining
```{r, fig.width=10, fig.height=8, out.width='100%'}
HclustDeseq2 <- hclust(dist(HeatdataDeseq2, method = "euclidean"), method = "complete")
p1 = ggtree(HclustDeseq2, branch.length = 'none', layout = "circular", size = 0.2, xlim = c(30, NA))
p1
# Examine node points, note the x-coordinate in this df (tree_data)
# Convert data generated by ggtree into a dataframe
tree_data <- as.data.frame(p1$data)
p2 <- rotate_tree(p1, 90)
p2
# Review nodes
p3 <- p2 + geom_text(aes(label = node)) + geom_tiplab(offset = 1, size = 3, hjust = -0.1)
p3
```


##  Usage Example
```{r}
# Please replace the following vectors with your specific values
nodes <- c(117, 129, 125, 127, 119, 123, 139, 166, 124, 131, 217) # x-values of the nodes you want to highlight
fill_colors <- c("#CD6600", "#CD6600", "#CD6600", "#CD6600", "#009933", "#009933", "#009933", "#009933", "#9B30FF", "#9B30FF", "#9B30FF") # Fill colors
alpha_values <- c(0.3, 0.3, 0.3, 0.3, 0.2, 0.3, 0.3, 0.3, 0.3, 0.3, 0.3) # Transparency values
extend_values <- c(25, 24, 24, 25, 25, 25, 24, 24, 25, 24, 24) # Values for the 'extend' parameter

# Now, you can call this function to create your ggtree layer

p2 <- highlight_by_node(
  p2, 
  nodes, 
  fill_colors, 
  alpha_values, 
  extend_values
  )
p2
```


## Diff_deseq2 Enrichment Analysis
### Obtain the list of genes
```{r}
gene <- rownames(Diff_deseq2)
## Convert
gene = bitr(gene, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
## Remove duplicates and merge
gene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)
gene_df <- data.frame(logFC=Diff_deseq2$log2FoldChange,
                      SYMBOL = rownames(Diff_deseq2))
gene_df <- merge(gene_df, gene, by="SYMBOL")
GO_deseq2 <- gene_df$ENTREZID
```

### GO Analysis for Biological Processes (BP)
```{r}
# Perform gene enrichment analysis
erich.go.BP_deseq2 <- enrichGO(
  gene = GO_deseq2,
  OrgDb = org.Hs.eg.db,
  keyType = "ENTREZID",
  ont = 'BP', # Other categories: "CC", "MF" for molecular function
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE)
erich.go.BP.outdata_deseq2 <- as.data.frame(erich.go.BP_deseq2)
# Uncomment to write output to CSV
# write.csv(erich.go.BP.outdata_deseq2, "E:/fruit/erich.go.BP.outdata.csv")
head(erich.go.BP.outdata_deseq2, 5)
```


### GO Analysis for Molecular Functions (MF)
```{r}
# Perform gene enrichment analysis
erich.go.MF_deseq2 <- enrichGO(
  gene = GO_deseq2,
  OrgDb = org.Hs.eg.db,
  keyType = "ENTREZID",
  ont = 'MF', # Other categories: "CC", "MF" for molecular function
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE)

erich.go.MF.outdata_deseq2 <- as.data.frame(erich.go.MF_deseq2)
# Uncomment to write output to CSV
# write.csv(erich.go.MF.outdata_deseq2, "E:/fruit/erich.go.MF.outdata.csv")

head(erich.go.MF.outdata_deseq2, 5)
```



### GO Analysis for Cellular Components (CC)
```{r}
# Perform gene enrichment analysis
erich.go.CC_deseq2 <- enrichGO(
  gene = GO_deseq2,
  OrgDb = org.Hs.eg.db,
  keyType = "ENTREZID",
  ont = 'CC', # Other categories: "CC", "MF" for molecular function
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.05,
  readable = TRUE)

erich.go.CC.outdata_deseq2 <- as.data.frame(erich.go.CC_deseq2)
# Uncomment to write output to CSV
# write.csv(erich.go.CC.outdata_deseq2, "E:/fruit/erich.go.CC.outdata.csv")
```


### KEGG Analysis 
```{r}
kegg.out_deseq2 = enrichKEGG(
  gene = GO_deseq2,
  organism = "hsa",
  keyType = "kegg",
  pvalueCutoff = 0.05,
  pAdjustMethod = "BH",
  qvalueCutoff = 0.05)
kegg.out.outdata_deseq2 <- as.data.frame(kegg.out_deseq2)
# Uncomment to export the data, which are in ENTREZID format
# write.csv(kegg.out.outdata_deseq2, "E:/kegg.out.outdata.csv")

##### Convert numeric Entrez gene IDs or Ensembl gene IDs from above code to symbols
library(org.Hs.eg.db)
kegg.out1_deseq2 = as.data.frame(kegg.out_deseq2)
ENTREZID = strsplit(kegg.out1_deseq2$geneID, "/")
symbol = sapply(ENTREZID, function(x) {
  y = bitr(x, fromType = "ENTREZID", toType = "SYMBOL", OrgDb = "org.Hs.eg.db")
  # In case of multiple matches, take the first one
  y = y[!duplicated(y$ENTREZID), -1]
  y = paste(y, collapse = "/")
})
kegg.out1_deseq2$geneID = symbol
kegg.out1.outdata_deseq2 <- as.data.frame(kegg.out1_deseq2)
# Uncomment to export the converted data
# write.csv(kegg.out1.outdata_deseq2, "E:/fruit/kegg.out1.outdata.csv")
head(kegg.out.outdata_deseq2, 5)
head(kegg.out1.outdata_deseq2, 5)
```


### DO Analysis
```{r}
erich.go.DO_deseq2 = enrichDO(gene = GO_deseq2,
                              ont = "DO", # Other categories: "CC", "MF" for molecular function
                              pvalueCutoff = 0.05,
                              qvalueCutoff = 0.05,
                              readable = TRUE)

erich.go.DO.outdata_deseq2 <- as.data.frame(erich.go.DO_deseq2)
# Uncomment to export the data
# write.csv(erich.go.DO.outdata_deseq2, "E:/fruit/erich.go.DO.outdata.csv")
head(erich.go.DO.outdata_deseq2, 5)
```


### Reactome Pathway Analysis 
```{r}
erich.go.Reactome_deseq2 <- enrichPathway(gene = GO_deseq2, pvalueCutoff = 0.05, readable = TRUE)

erich.go.Reactome.outdata_deseq2 <- as.data.frame(erich.go.Reactome_deseq2)
# Uncomment to export the data
# write.csv(erich.go.Reactome.outdata_deseq2, "E:/fruit/erich.go.Reactome.outdata.csv")
head(erich.go.Reactome.outdata_deseq2, 5)
```


### Filter and organize data by setting the count values of genes in pathways or by selecting pathway names of interest to the user.
```{r}
# DEG_deseq2
## Conversion
GO_deseq2 = bitr(GO_deseq2, fromType="ENTREZID", toType="SYMBOL", OrgDb="org.Hs.eg.db")
GO_deseq2 <- GO_deseq2$SYMBOL

# Usage Example
# count
count_threshold <- 12
result_threshold_deseq2 <- pathway_count(GO_deseq2, count_threshold, erich.go.BP.outdata_deseq2)
# Print the results
head(result_threshold_deseq2, 5)


# List of selected pathway names
selected_pathways_names <- c("immunoglobulin production", "production of molecular mediator of immune response")
# Use function
result_names_deseq2 <- pathway_description(GO_deseq2, selected_pathways_names, erich.go.BP.outdata_deseq2)
# View the results
head(result_names_deseq2, 5)
```


### Label highly and lowly expressed genes and annotate corresponding colors
```{r}
selected_genes_deseq2 <- result_threshold_deseq2 %>%
  dplyr::filter(Exists == 1) %>%
  dplyr::select(Symble) %>%
  dplyr::distinct()

# Invoke the function
result_deseq2 <- gene_color(selected_genes_deseq2, Diff_deseq2, "#0000EE", "#fc4746")

# Add gene highlights to the plot
add_gene_highlights_p3 <- highlight_genes(p2, result_deseq2, hilight_extend = 26)
add_gene_highlights_p3

```

### heatmap
```{r, fig.width=15, fig.height=15, out.width='100%'}
p4<- gheatmap(
  add_gene_highlights_p3+ geom_tiplab(offset=15,size=2.5),
  HeatdataDeseq2,
  width = 1, 
  colnames_offset_y = 0.5,
  font.size= 2, 
  hjust = 0)+ scale_fill_gradientn(colors = c(low = "#c2d5e5", high = "steelblue"))

p4
```


### ggtreeExtra::geom_fruit
```{r, fig.width=15, fig.height=15, out.width='100%'}
## Shorten a name that was too long
result_threshold_deseq2$Description <- gsub("adaptive immune response based on somatic recombination of immune receptors built from immunoglobulin superfamily domains",
                                            "adaptive immune response", result_threshold_deseq2$Description)

# Enhance the visualization with additional scale and elements
p7 <- p4 + new_scale_fill() +
  geom_fruit(data = result_threshold_deseq2, geom = geom_tile,
              mapping = aes(y = Symble, x = Description, alpha = Exists, fill = Description),
              color = "grey50", pwidth = 0.5, offset = 1.02, size = 0.02) +
  scale_alpha_continuous(range = c(0.2, 0.8),
                          guide = guide_legend(keywidth = 0.3, keyheight = 0.3,  order = 2)) +
  scale_fill_manual(values = c("#CD6600", "#009933", "#0000EE", "#9B30FF", "#FF4040"), guide = guide_legend(keywidth = 0.3, keyheight = 0.3, order = 2))

p7
```


### Bar plot section 
```{r, fig.width=17, fig.height=17, out.width='100%'}
# offset: Adjust the spacing between each bar
p8 <- p7 + new_scale_fill() + 
  geom_fruit(data = Diff_deseq2, geom = geom_bar, mapping = aes(y = ID, x = log_pvalue, fill = "log_pvalue"), pwidth = 0.3, offset = 0.1, orientation = "y", stat = "identity") +
  geom_fruit(data = Diff_deseq2, geom = geom_bar, mapping = aes(y = ID, x = log2FoldChange, fill = "log2FoldChange"), pwidth = 0.3, offset = 0.2, orientation = "y", stat = "identity") +
  geom_fruit(data = Diff_deseq2, geom = geom_bar, mapping = aes(y = ID, x = average, fill = "average"), pwidth = 0.3, offset = 0.04, orientation = "y", stat = "identity") +
  scale_fill_manual(values = c("log_pvalue" = "#87CEFA", "log2FoldChange" = "#FFC125", "average" = "#7B68EE"))

p8
```


# Reference
>   - <a href="https://doi.org/10.1111/2041-210X.12628" style="color: #758b76; font-weight: bold;">G Yu, DK Smith, H Zhu, Y Guan, TTY Lam*. ggtree: an R package for visualization and annotation of phylogenetic trees with their covariates and other associated data. Methods in Ecology and Evolution. 2017, 8(1):28-36.</a>
>   - <a href="https://doi.org/10.1093/molbev/msy194" style="color: #758b76; font-weight: bold;">G Yu*, TTY Lam, H Zhu, Y Guan*. Two methods for mapping and visualizing associated data on phylogeny using ggtree. Molecular Biology and Evolution, 2018, 35(2):3041-3043. </a>
>   - <a href="https://doi.org/10.1093/molbev/msab166" style="color: #758b76; font-weight: bold;">S Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L Zhan, T Wu, E Hu, Y Jiang*, X Bo* and G Yu*. ggtreeExtra: Compact visualization of richly annotated phylogenetic data. Molecular Biology and Evolution. 2021, 38(9):4039-4042. </a>
>   - <a href="https://doi.org/10.1016/j.xinn.2021.100141" style="color: #758b76; font-weight: bold;">T Wu#, E Hu#, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo*, G Yu*. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141. </a>
>   - <a href="https://pubs.rsc.org/en/content/articlelanding/2016/mb/c5mb00663e" style="color: #758b76; font-weight: bold;">G Yu, QY He*. ReactomePA: an R/Bioconductor package for reactome pathway analysis and visualization. Molecular BioSystems 2016, 12(2):477-479.</a>
>   - <a href="https://www.altmetric.com/details/2788597" style="color: #758b76; font-weight: bold;">G Yu, LG Wang, GR Yan, QY He. DOSE: an R/Bioconductor package for Disease Ontology Semantic and Enrichment analysis. Bioinformatics 2015, 31(4):608-609.</a>

