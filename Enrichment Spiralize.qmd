# Enrichment Spiralize

::: {.callout-note}
The spiral plots generated by this module provide an intuitive visual display, depicting the expression changes in different biological pathways across samples through gradient colors and spatial arrangement. This visualization method helps to more clearly identify and compare the activity differences in key pathways, thereby deepening the understanding of physiological mechanisms.
:::


```{r setup, include=FALSE}
library(TransProR)
library(org.Hs.eg.db)
library(clusterProfiler)
library(tidyr)
library(dplyr)
library(ggplot2)
library(GSVA)
library(msigdbr)
library(scales)
```

```r 
library(TransProR)
library(org.Hs.eg.db)
library(clusterProfiler)
library(tidyr)
library(dplyr)
library(ggplot2)
library(GSVA)
library(msigdbr)
library(scales)
```


## load data
```{r}
tumor <- readRDS("../test_TransProR/generated_data1/removebatch_SKCM_Skin_TCGA_exp_tumor.rds")
normal <- readRDS('../test_TransProR/generated_data1/removebatch_SKCM_Skin_Normal_TCGA_GTEX_count.rds')
# Merge the datasets, ensuring both have genes as row names
all_count_exp <- merge(tumor, normal, by = "row.names")
all_count_exp <- tibble::column_to_rownames(all_count_exp, var = "Row.names")  # Set the row names

# Drawing data
# all_count_exp <- log_transform(all_count_exp)
DEG_deseq2 <- readRDS('../test_TransProR/Select DEGs/DEG_deseq2.Rdata')
#head(all_count_exp, 1)
head(DEG_deseq2, 5)
```

## Convert from SYMBOL to ENTREZID
```{r}
# Convert from SYMBOL to ENTREZID for convenient enrichment analysis later. It's crucial to do this now as a direct conversion may result in a reduced set of genes due to non-one-to-one correspondence.

# DEG_deseq2
# Retrieve gene list
gene <- rownames(DEG_deseq2)
# Perform conversion
gene = bitr(gene, fromType="SYMBOL", toType="ENTREZID", OrgDb="org.Hs.eg.db")



# Remove duplicates and merge
gene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)
# Extract the SYMBOL column as a vector from the first dataset
symbols_vector <- gene$SYMBOL
# Use the SYMBOL column to filter corresponding rows from the second dataset by row names
DEG_deseq2 <- DEG_deseq2[rownames(DEG_deseq2) %in% symbols_vector, ]
head(DEG_deseq2, 5)

```


```{r}
Diff_deseq2 <- filter_diff_genes(
  DEG_deseq2, 
  p_val_col = "pvalue", 
  log_fc_col = "log2FoldChange",
  p_val_threshold = 0.05, 
  log_fc_threshold = 3
)
# First, obtain a list of gene names from the row names of the first dataset
gene_names <- rownames(Diff_deseq2)
# Find the matching rows in the second dataframe
matched_rows <- all_count_exp[gene_names, ]
# Calculate the mean for each row
averages <- rowMeans(matched_rows, na.rm = TRUE)
# Append the averages as a new column to the first dataframe
Diff_deseq2$average <- averages
Diff_deseq2$ID <- rownames(Diff_deseq2)
Diff_deseq2$changetype <- ifelse(Diff_deseq2$change == 'up', 1, -1)
# Define a small threshold value
small_value <- .Machine$double.xmin
# Before calculating -log10, replace zeroes with the small threshold value and assign it to a new column
Diff_deseq2$log_pvalue <- ifelse(Diff_deseq2$pvalue == 0, -log10(small_value), -log10(Diff_deseq2$pvalue))
# Extract the expression data corresponding to the differentially expressed genes
heatdata_deseq2 <- all_count_exp[rownames(Diff_deseq2), ]

set.seed(123)
# Preparing heatdata for visualization
HeatdataDeseq2 <- TransProR::process_heatdata(heatdata_deseq2, 
                                              selection = 2, 
                                              custom_names = NULL, 
                                              num_names_per_group = 3, 
                                              prefix_length = 4)
HeatdataDeseq2 <- as.matrix(HeatdataDeseq2)

```


```{r}
## Using the msigdbr package to download and prepare for GSVA analysis with KEGG and GO gene sets
## KEGG
KEGG_df_all <- msigdbr(species = "Homo sapiens", # Homo sapiens or Mus musculus
                        category = "C2",
                        subcategory = "CP:KEGG") 
KEGG_df <- dplyr::select(KEGG_df_all, gs_name, gs_exact_source, gene_symbol)
kegg_list <- split(KEGG_df$gene_symbol, KEGG_df$gs_name) # Grouping gene symbols by gs_name
head(kegg_list)




## GO
GO_df_all <- msigdbr(species = "Homo sapiens",
                      category = "C5")  
GO_df <- dplyr::select(GO_df_all, gs_name, gene_symbol, gs_exact_source, gs_subcat)
GO_df <- GO_df[GO_df$gs_subcat != "HPO",]
go_list <- split(GO_df$gene_symbol, GO_df$gs_name) # Grouping gene symbols by gs_name
head(go_list)




#write.csv(gsva_mat, "gsva_go_matrix.csv")

ssgsea_kegg <- gsva(expr = HeatdataDeseq2, 
                    gset.idx.list = kegg_list, 
                    kcdf = "Poisson", #"Gaussian" for logCPM, logRPKM, logTPM, "Poisson" for counts
                    method = "ssgsea",
                    verbose = TRUE
                    #parallel.sz = parallel::detectCores() # Utilize all available cores
)

ssgsea_kegg <- as.data.frame(ssgsea_kegg)

```

## set color
```{r}
nTop = 5
results1 <- extract_ntop_pathways(ssgsea_kegg = ssgsea_kegg, nTop = nTop)
results2 <- extract_positive_pathways(ssgsea_kegg, max_paths_per_sample = 5)
# Set the required number of transition colors

number_of_colors <- nTop

# Define start and end colors
start_color1 <- "#fd8d63"  
end_color1 <- "#ededed"    
# Use colorRampPalette to generate color transitions
color_palette1 <- colorRampPalette(c(start_color1, end_color1))
interpolated_colors1 <- color_palette1(number_of_colors)

start_color2 <- "#673ab7"  
end_color2 <- "#d1c4e9"    
color_palette2 <- colorRampPalette(c(start_color2, end_color2))
interpolated_colors2 <- color_palette2(number_of_colors)

start_color3 <- "#6ac1a7"  
end_color3 <- "#ededed"    
color_palette3 <- colorRampPalette(c(start_color3, end_color3))
interpolated_colors3 <- color_palette3(number_of_colors)

start_color4 <- "#2196f3"  
end_color4 <- "#bbdefb"    
color_palette4 <- colorRampPalette(c(start_color4, end_color4))
interpolated_colors4 <- color_palette4(number_of_colors)

start_color5 <- "#ffdb37"  
end_color5 <- "#ededed"    
color_palette5 <- colorRampPalette(c(start_color5, end_color5))
interpolated_colors5 <- color_palette5(number_of_colors)

start_color6 <- "#00bcd4"  
end_color6 <- "#b2ebf2"    
color_palette6 <- colorRampPalette(c(start_color6, end_color6))
interpolated_colors6 <- color_palette6(number_of_colors)

start_color7 <- "#a7da55"  
end_color7 <- "#ededed"    
color_palette7 <- colorRampPalette(c(start_color7, end_color7))
interpolated_colors7 <- color_palette7(number_of_colors)

start_color8 <- "#43a047"  
end_color8 <- "#c8e6c9"    
color_palette8 <- colorRampPalette(c(start_color8, end_color8))
interpolated_colors8 <- color_palette8(number_of_colors)

start_color9 <- "#e68bc1"  
end_color9 <- "#ededed"    
color_palette9 <- colorRampPalette(c(start_color9, end_color9))
interpolated_colors9 <- color_palette9(number_of_colors)

start_color10 <- "#cddc39"  
end_color10 <- "#f0f4c3"    
color_palette10 <- colorRampPalette(c(start_color10, end_color10))
interpolated_colors10 <- color_palette10(number_of_colors)

start_color11 <- "#8fa1cc"  
end_color11 <- "#ededed"    
color_palette11 <- colorRampPalette(c(start_color11, end_color11))
interpolated_colors11 <- color_palette11(number_of_colors)

start_color12 <- "#ff8f00"  
end_color12 <- "#ffecb3"    
color_palette12 <- colorRampPalette(c(start_color12, end_color12))
interpolated_colors12 <- color_palette12(number_of_colors)

# Print the resulting colors
Pathwaycolor2 <- c(interpolated_colors1, interpolated_colors3, interpolated_colors5, interpolated_colors7, interpolated_colors9, interpolated_colors11)
print(Pathwaycolor2)

Samplecolor2 <- c(start_color1, start_color3, start_color5, start_color7, start_color9, start_color11)
print(Samplecolor2)

results1$PathwayColor <- Pathwaycolor2
results2$PathwayColor <- Pathwaycolor2
# Create a color mapping for the Sample column
Sample_colors2 <- setNames(Samplecolor2, unique(results1$Sample))
Sample_colors2 <- setNames(Samplecolor2, unique(results2$Sample))
# Add SampleColor column to the DataFrame
results1$SampleColor <- Sample_colors2[results1$Sample]
results2$SampleColor <- Sample_colors2[results2$Sample]
# View the results
print(head(results1))
print(head(results2))
```

## Sort
```{r, fig.width=15, fig.height=9, out.width='100%'}
enrichment_spiral_plots(results1)
```

## Random
```{r, fig.width=15, fig.height=9, out.width='100%'}
enrichment_spiral_plots(results2)
```


## Reference
> - **spiralize**:
>
>> <a href="https://doi.org/10.1093/bioinformatics/btab778" style="color: #758b76; font-weight: bold;">Zuguang Gu, et al., spiralize: an R package for Visualizing Data on Spirals, Bioinformatics, 2021.</a>
>>
>
> - **ComplexHeatmap**:
> 
>><a href="https://academic.oup.com/bioinformatics/article/32/18/2847/1743594" style="color: #758b76; font-weight: bold;">Complex heatmaps reveal patterns and correlations in multidimensional genomic data</a>
>>
>><a href="https://onlinelibrary.wiley.com/doi/10.1002/imt2.43" style="color: #758b76; font-weight: bold;">Complex heatmap visualization</a>
>
> - **ggplot2**:
> 
>><a href="https://github.com/tidyverse/ggplot2" style="color: #758b76; font-weight: bold;">github:ggplot2</a>
>>
>><a href="https://ggplot2.tidyverse.org/" style="color: #758b76; font-weight: bold;">An implementation of the Grammar of Graphics in R</a>
>
