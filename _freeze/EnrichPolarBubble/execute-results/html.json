{
  "hash": "e531556d1983ac9a82d903dde8cecb83",
  "result": {
    "markdown": "# New Enrichment Polar Bubble\n::: {.callout-tip}\nThe analysis workflow initially employed four statistical methods: limma, DESeq2, edgeR, and Wilcoxon, to process six different types of bioinformatics enrichment analyses, including <b style=\"color: #6a926b;\">Biological Processes (BP), Cellular Components (CC), Molecular Functions (MF), KEGG Pathways, Disease Ontology (DO), and REACTOME Pathways.</b>\n\nSubsequently, detailed data visualization was conducted using ggplot2, which included using specific colors to highlight important IDs, displaying multilevel geometric figures (points, lines, and areas), and enhancing visual effects through polar coordinate transformation, making the results both intuitive and informative.\n:::\n\n\n\n\n\n\n\n```r \nlibrary(TransProR)\nlibrary(ggnewscale)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(clusterProfiler)\nlibrary(org.Hs.eg.db)\nlibrary(DOSE)\nlibrary(ReactomePA)\n```\n\n\n\n\n## Load data\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the tumor and normal datasets\ntumor <- readRDS(\"../test_TransProR/generated_data1/removebatch_SKCM_Skin_TCGA_exp_tumor.rds\")\nnormal <- readRDS(\"../test_TransProR/generated_data1/removebatch_SKCM_Skin_Normal_TCGA_GTEX_count.rds\")\n\n# Merge the datasets, ensuring that genes are used as row names\nall_count_exp <- merge(tumor, normal, by = \"row.names\")\nall_count_exp <- tibble::column_to_rownames(all_count_exp, var = \"Row.names\")  # Set the row names\n\n# Data transformation for plotting\nall_count_exp <- log_transform(all_count_exp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"log2 transform finished\"\n```\n:::\n\n```{.r .cell-code}\nDEG_deseq2 <- readRDS('../test_TransProR/Select DEGs/DEG_deseq2.Rdata')\nDEG_edgeR <- readRDS('../test_TransProR/Select DEGs/DEG_edgeR.Rdata')\nDEG_limma_voom <- readRDS('../test_TransProR/Select DEGs/DEG_limma_voom.Rdata')\nWilcoxon_rank_sum_testoutRst <- readRDS('../test_TransProR/Select DEGs/Wilcoxon_rank_sum_testoutRst.Rdata')\n```\n:::\n\n\n## fromType = \"SYMBOL\", toType = \"ENTREZID\"\n\n::: {.cell}\n\n```{.r .cell-code}\n# Conversion parameters defined to facilitate subsequent enrichment analysis:\n# fromType = \"SYMBOL\", toType = \"ENTREZID\"\n# This conversion is essential to avoid potential data loss due to non-one-to-one correspondence between symbols and ENTREZ IDs.\n\n# DEG_deseq2: Obtain a list of genes\ngene <- rownames(DEG_deseq2)\n# Convert gene symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:many mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in bitr(gene, fromType = \"SYMBOL\", toType = \"ENTREZID\", OrgDb =\n\"org.Hs.eg.db\"): 43.37% of input gene IDs are fail to map...\n```\n:::\n\n```{.r .cell-code}\n# Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\n# Extract the SYMBOL column from the first dataset as a vector\nsymbols_vector <- gene$SYMBOL\n# Use the SYMBOL column as row names to filter corresponding rows in the second dataset\nDEG_deseq2 <- DEG_deseq2[rownames(DEG_deseq2) %in% symbols_vector, ]\n\n# DEG_edgeR: Obtain a list of genes\ngene <- rownames(DEG_edgeR)\n# Convert gene symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:many mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in bitr(gene, fromType = \"SYMBOL\", toType = \"ENTREZID\", OrgDb =\n\"org.Hs.eg.db\"): 27.35% of input gene IDs are fail to map...\n```\n:::\n\n```{.r .cell-code}\n# Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\n# Extract the SYMBOL column from the first dataset as a vector\nsymbols_vector <- gene$SYMBOL\n# Use the SYMBOL column as row names to filter corresponding rows in the second dataset\nDEG_edgeR <- DEG_edgeR[rownames(DEG_edgeR) %in% symbols_vector, ]\n\n# DEG_limma_voom: Obtain a list of genes\ngene <- rownames(DEG_limma_voom)\n# Convert gene symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:many mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in bitr(gene, fromType = \"SYMBOL\", toType = \"ENTREZID\", OrgDb =\n\"org.Hs.eg.db\"): 19.69% of input gene IDs are fail to map...\n```\n:::\n\n```{.r .cell-code}\n# Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\n# Extract the SYMBOL column from the first dataset as a vector\nsymbols_vector <- gene$SYMBOL\n# Use the SYMBOL column as row names to filter corresponding rows in the second dataset\nDEG_limma_voom <- DEG_limma_voom[rownames(DEG_limma_voom) %in% symbols_vector, ]\n\n# Wilcoxon Rank Sum Test Output\n# Obtain a list of genes\ngene <- rownames(Wilcoxon_rank_sum_testoutRst)\n# Convert gene symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:many mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in bitr(gene, fromType = \"SYMBOL\", toType = \"ENTREZID\", OrgDb =\n\"org.Hs.eg.db\"): 19.69% of input gene IDs are fail to map...\n```\n:::\n\n```{.r .cell-code}\n# Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\n# Extract the SYMBOL column from the first dataset as a vector\nsymbols_vector <- gene$SYMBOL\n# Use the SYMBOL column as row names to filter corresponding rows in the second dataset\nWilcoxon_rank_sum_testoutRst <- Wilcoxon_rank_sum_testoutRst[rownames(Wilcoxon_rank_sum_testoutRst) %in% symbols_vector, ]\n```\n:::\n\n\n\n## Select differentially expressed genes\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select differentially expressed genes\n\nDiff_deseq2 <- filter_diff_genes(DEG_deseq2, p_val_col = \"pvalue\", log_fc_col = \"log2FoldChange\", \n                                  p_val_threshold = 0.01, log_fc_threshold = 7)\n# First, get gene names as a list from the row names of the first dataset\ngene_names <- rownames(Diff_deseq2)\n# Find matching rows in the second dataframe\nmatched_rows <- all_count_exp[gene_names, ]\n# Calculate the average for each row\naverages <- rowMeans(matched_rows, na.rm = TRUE) \n# Append averages to the last column of the first dataframe\nDiff_deseq2$average <- averages\nDiff_deseq2$ID <- rownames(Diff_deseq2)\nDiff_deseq2$changetype <- ifelse(Diff_deseq2$change == 'up', 1, -1)\n# Define a small threshold value\nsmall_value <- .Machine$double.xmin\n# Before computing -log10, replace zero values with the small threshold, then assign to a new column\nDiff_deseq2$log_pvalue <- ifelse(Diff_deseq2$pvalue == 0, -log10(small_value), -log10(Diff_deseq2$pvalue))\nheatdata_deseq2 <- all_count_exp[rownames(Diff_deseq2),]\n\n\nDiff_edgeR <- filter_diff_genes(DEG_edgeR, p_val_col = \"PValue\", log_fc_col = \"logFC\", \n                                p_val_threshold = 0.01, log_fc_threshold = 7)\n# First, get gene names as a list from the row names of the first dataset\ngene_names <- rownames(Diff_edgeR)\n# Find matching rows in the second dataframe\nmatched_rows <- all_count_exp[gene_names, ]\n# Calculate the average for each row\naverages <- rowMeans(matched_rows, na.rm = TRUE) \n# Append averages to the last column of the first dataframe\nDiff_edgeR$average <- averages\nDiff_edgeR$ID <- rownames(Diff_edgeR)\nDiff_edgeR$changetype <- ifelse(Diff_edgeR$change == 'up', 1, -1)\n# Define a small threshold value\nsmall_value <- .Machine$double.xmin\n# Before computing -log10, replace zero values with the small threshold, then assign to a new column\nDiff_edgeR$log_pvalue <- ifelse(Diff_edgeR$PValue == 0, -log10(small_value), -log10(Diff_edgeR$PValue))\nheatdata_edgeR <- all_count_exp[rownames(Diff_edgeR),]\n\n\nDiff_limma_voom <- filter_diff_genes(DEG_limma_voom, p_val_col = \"P.Value\", log_fc_col = \"logFC\", \n                                      p_val_threshold = 0.01, log_fc_threshold = 5.5)\n# First, get gene names as a list from the row names of the first dataset\ngene_names <- rownames(Diff_limma_voom)\n# Find matching rows in the second dataframe\nmatched_rows <- all_count_exp[gene_names, ]\n# Calculate the average for each row\naverages <- rowMeans(matched_rows, na.rm = TRUE) \n# Append averages to the last column of the first dataframe\nDiff_limma_voom$average <- averages\nDiff_limma_voom$ID <- rownames(Diff_limma_voom)\nDiff_limma_voom$changetype <- ifelse(Diff_limma_voom$change == 'up', 1, -1)\n# Define a small threshold value\nsmall_value <- .Machine$double.xmin\n# Before computing -log10, replace zero values with the small threshold, then assign to a new column\nDiff_limma_voom$log_pvalue <- ifelse(Diff_limma_voom$P.Value == 0, -log10(small_value), -log10(Diff_limma_voom$P.Value))\nheatdata_limma_voom <- all_count_exp[rownames(Diff_limma_voom),]\n\n\nDiff_Wilcoxon <- filter_diff_genes(Wilcoxon_rank_sum_testoutRst, p_val_col = \"pValues\", log_fc_col = \"log2foldChange\", \n                                    p_val_threshold = 0.01, log_fc_threshold = 6)\n# First, get gene names as a list from the row names of the first dataset\ngene_names <- rownames(Diff_Wilcoxon)\n# Find matching rows in the second dataframe\nmatched_rows <- all_count_exp[gene_names, ]\n# Calculate the average for each row\naverages <- rowMeans(matched_rows, na.rm = TRUE) \n# Append averages to the last column of the first\n```\n:::\n\n\n## Enrichment analysis for Diff_deseq2\n\n::: {.cell}\n\n```{.r .cell-code}\n###### Enrichment analysis for Diff_deseq2\n# Obtain a list of genes\ngene <- rownames(Diff_deseq2)\n## Convert symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\n## Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\ngene_df <- data.frame(logFC=Diff_deseq2$log2FoldChange, SYMBOL = rownames(Diff_deseq2))\ngene_df <- merge(gene_df, gene, by=\"SYMBOL\")\nGO_deseq2 <- gene_df$ENTREZID\n###### This file only requires a column with gene names\n###################\n\n# GO Analysis for Biological Process (BP)\n# Conduct gene enrichment analysis\nerich.go.BP_deseq2 <- enrichGO(gene = GO_deseq2,\n                                OrgDb = org.Hs.eg.db,\n                                keyType = \"ENTREZID\",\n                                ont = 'BP', # Biological Process\n                                pvalueCutoff = 0.05,\n                                qvalueCutoff = 0.05,\n                                readable = TRUE)\nerich.go.BP.outdata_deseq2 <- as.data.frame(erich.go.BP_deseq2)\nsummary(erich.go.BP.outdata_deseq2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ID            Description         GeneRatio           BgRatio         \n Length:23          Length:23          Length:23          Length:23         \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n     pvalue             p.adjust            qvalue            geneID         \n Min.   :0.000e+00   Min.   :0.000000   Min.   :0.000000   Length:23         \n 1st Qu.:0.000e+00   1st Qu.:0.000000   1st Qu.:0.000000   Class :character  \n Median :0.000e+00   Median :0.000000   Median :0.000000   Mode  :character  \n Mean   :6.230e-05   Mean   :0.005689   Mean   :0.005633                     \n 3rd Qu.:2.733e-05   3rd Qu.:0.002994   3rd Qu.:0.002965                     \n Max.   :4.446e-04   Max.   :0.037466   Max.   :0.037097                     \n     Count      \n Min.   : 4.00  \n 1st Qu.: 9.50  \n Median :22.00  \n Mean   :24.22  \n 3rd Qu.:41.00  \n Max.   :47.00  \n```\n:::\n\n```{.r .cell-code}\n#write.csv(erich.go.BP.outdata, \"E:/fruit/erich.go.BP.outdata.csv\")\n\n# GO Analysis for Molecular Function (MF)\n# Conduct gene enrichment analysis\nerich.go.MF_deseq2 <- enrichGO(gene = GO_deseq2,\n                                OrgDb = org.Hs.eg.db,\n                                keyType = \"ENTREZID\",\n                                ont = 'MF', # Molecular Function\n                                pvalueCutoff = 0.05,\n                                qvalueCutoff = 0.05,\n                                readable = TRUE)\nerich.go.MF.outdata_deseq2 <- as.data.frame(erich.go.MF_deseq2)\n#write.csv(erich.go.MF.outdata, \"E:/fruit/erich.go.MF.outdata.csv\")\n\n# GO Analysis for Cellular Component (CC)\n# Conduct gene enrichment analysis\nerich.go.CC_deseq2 <- enrichGO(gene = GO_deseq2,\n                                OrgDb = org.Hs.eg.db,\n                                keyType = \"ENTREZID\",\n                                ont = 'CC', # Cellular Component\n                                pvalueCutoff = 0.05,\n                                qvalueCutoff = 0.05,\n                                readable = TRUE)\nerich.go.CC.outdata_deseq2 <- as.data.frame(erich.go.CC_deseq2)\n#write.csv(erich.go.CC.outdata, \"E:/fruit/erich.go.CC.outdata.csv\")\n\n#### KEGG Analysis ###\nkegg.out_deseq2 <- enrichKEGG(gene = GO_deseq2,\n                              organism = \"hsa\",\n                              keyType = \"kegg\",\n                              pvalueCutoff = 0.05,\n                              pAdjustMethod = \"BH\",\n                              qvalueCutoff = 0.05)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nReading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"...\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nReading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"...\n```\n:::\n\n```{.r .cell-code}\nkegg.out.outdata_deseq2 <- as.data.frame(kegg.out_deseq2)\n# Convert ENTREZ gene IDs or Ensembl gene IDs to symbols\nkegg.out1_deseq2 = as.data.frame(kegg.out_deseq2)\nENTREZID = strsplit(kegg.out1_deseq2$geneID, \"/\")\nsymbol = sapply(ENTREZID, function(x) {\n  y = bitr(x, fromType=\"ENTREZID\", toType=\"SYMBOL\", OrgDb=\"org.Hs.eg.db\")\n  # For many-to-one mappings, pick the first one\n  y = y[!duplicated(y$ENTREZID), -1]\n  y = paste(y, collapse = \"/\")\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\nkegg.out1_deseq2$geneID = symbol\nkegg.out1.outdata_deseq2 <- as.data.frame(kegg.out1_deseq2)\n#write.csv(kegg.out1.outdata, \"E:/fruit/kegg.out1.outdata.csv\")\n\n###### Disease Ontology (DO) Analysis #####\nerich.go.DO_deseq2 <- enrichDO(gene = GO_deseq2,\n                                ont = \"DO\", # Disease Ontology\n                                pvalueCutoff = 0.05,\n                                qvalueCutoff = 0.05,\n                                readable = TRUE)\nerich.go.DO.outdata_deseq2 <- as.data.frame(erich.go.DO_deseq2)\n#write.csv(erich.go.DO.outdata, \"E:/fruit/erich.go.DO.outdata.csv\")\n\n##### Reactome Pathway Analysis #####\nerich.go.Reactome_deseq2 <- enrichPathway(gene = GO_deseq2, pvalueCutoff = 0.05, readable = TRUE)\nerich.go.Reactome.outdata_deseq2 <- as.data.frame(erich.go.Reactome_deseq2)\n#write.csv(erich.go.Reactome.outdata, \"E:/fruit/erich.go.Reactome.outdata.csv\")\n```\n:::\n\n\n## Enrichment analysis for Diff_edgeR\n\n::: {.cell}\n\n```{.r .cell-code}\n###### Enrichment analysis for Diff_edgeR\n# Obtain a list of genes\ngene <- rownames(Diff_edgeR)\n## Convert symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\n## Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\ngene_df <- data.frame(logFC=Diff_edgeR$logFC, SYMBOL = rownames(Diff_edgeR))\ngene_df <- merge(gene_df, gene, by=\"SYMBOL\")\nGO_edgeR <- gene_df$ENTREZID\n###### This file only requires a column with gene names\n###################\n\n# GO Analysis for Biological Process (BP)\n# Conduct gene enrichment analysis\nerich.go.BP_edgeR <- enrichGO(gene = GO_edgeR,\n                              OrgDb = org.Hs.eg.db,\n                              keyType = \"ENTREZID\",\n                              ont = 'BP', # Biological Process\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.BP.outdata_edgeR <- as.data.frame(erich.go.BP_edgeR)\n#write.csv(erich.go.BP.outdata, \"E:/fruit/erich.go.BP.outdata.csv\")\n\n# GO Analysis for Molecular Function (MF)\n# Conduct gene enrichment analysis\nerich.go.MF_edgeR <- enrichGO(gene = GO_edgeR,\n                              OrgDb = org.Hs.eg.db,\n                              keyType = \"ENTREZID\",\n                              ont = 'MF', # Molecular Function\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.MF.outdata_edgeR <- as.data.frame(erich.go.MF_edgeR)\n#write.csv(erich.go.MF.outdata, \"E:/fruit/erich.go.MF.outdata.csv\")\n\n# GO Analysis for Cellular Component (CC)\n# Conduct gene enrichment analysis\nerich.go.CC_edgeR <- enrichGO(gene = GO_edgeR,\n                              OrgDb = org.Hs.eg.db,\n                              keyType = \"ENTREZID\",\n                              ont = 'CC', # Cellular Component\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.CC.outdata_edgeR <- as.data.frame(erich.go.CC_edgeR)\n#write.csv(erich.go.CC.outdata, \"E:/fruit/erich.go.CC.outdata.csv\")\n\n#### KEGG Analysis ###\nkegg.out_edgeR <- enrichKEGG(gene = GO_edgeR,\n                              organism = \"hsa\",\n                              keyType = \"kegg\",\n                              pvalueCutoff = 0.05,\n                              pAdjustMethod = \"BH\",\n                              qvalueCutoff = 0.05)\nkegg.out.outdata_edgeR <- as.data.frame(kegg.out_edgeR)\n# Convert ENTREZ gene IDs or Ensembl gene IDs to symbols\nlibrary(org.Hs.eg.db)\nkegg.out1_edgeR = as.data.frame(kegg.out_edgeR)\nENTREZID = strsplit(kegg.out1_edgeR$geneID, \"/\")\nsymbol = sapply(ENTREZID, function(x) {\n  y = bitr(x, fromType=\"ENTREZID\", toType=\"SYMBOL\", OrgDb=\"org.Hs.eg.db\")\n  # For many-to-one mappings, pick the first\n  y = y[!duplicated(y$ENTREZID), -1]\n  y = paste(y, collapse = \"/\")\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\nkegg.out1_edgeR$geneID = symbol\nkegg.out1.outdata_edgeR <- as.data.frame(kegg.out1_edgeR)\n#write.csv(kegg.out1.outdata, \"E:/fruit/kegg.out1.outdata.csv\")\n\n###### Disease Ontology (DO) Analysis #####\nlibrary(DOSE)\nerich.go.DO_edgeR <- enrichDO(gene = GO_edgeR,\n                              ont = \"DO\", # Disease Ontology\n                              pvalueCutoff = 0.5,\n                              qvalueCutoff = 0.5,\n                              readable = TRUE)\nerich.go.DO.outdata_edgeR <- as.data.frame(erich.go.DO_edgeR)\n#write.csv(erich.go.DO.outdata, \"E:/fruit/erich.go.DO.outdata.csv\")\n\nlibrary(ReactomePA)\n##### Reactome Pathway Analysis #####\nerich.go.Reactome_edgeR <- enrichPathway(gene = GO_edgeR, pvalueCutoff = 0.5, readable = TRUE)\nerich.go.Reactome.outdata_edgeR <- as.data.frame(erich.go.Reactome_edgeR)\n```\n:::\n\n\n## Enrichment analysis for Diff_limma_voom\n\n::: {.cell}\n\n```{.r .cell-code}\n###### Enrichment analysis for Diff_limma_voom\n# Obtain a list of genes\ngene <- rownames(Diff_limma_voom)\n## Convert symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\n## Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\ngene_df <- data.frame(logFC=Diff_limma_voom$logFC, SYMBOL = rownames(Diff_limma_voom))\ngene_df <- merge(gene_df, gene, by=\"SYMBOL\")\nGO_limma <- gene_df$ENTREZID\n###### This file only requires a column with gene names\n###################\n\n# GO Analysis for Biological Process (BP)\n# Conduct gene enrichment analysis\nerich.go.BP_limma <- enrichGO(gene = GO_limma,\n                              OrgDb = org.Hs.eg.db,\n                              keyType = \"ENTREZID\",\n                              ont = 'BP', # Biological Process\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.BP.outdata_limma <- as.data.frame(erich.go.BP_limma)\n#write.csv(erich.go.BP.outdata, \"E:/fruit/erich.go.BP.outdata.csv\")\n\n# GO Analysis for Molecular Function (MF)\n# Conduct gene enrichment analysis\nerich.go.MF_limma <- enrichGO(gene = GO_limma,\n                              OrgDb = org.Hs.eg.db,\n                              keyType = \"ENTREZID\",\n                              ont = 'MF', # Molecular Function\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.MF.outdata_limma <- as.data.frame(erich.go.MF_limma)\n#write.csv(erich.go.MF.outdata, \"E:/fruit/erich.go.MF.outdata.csv\")\n\n# GO Analysis for Cellular Component (CC)\n# Conduct gene enrichment analysis\nerich.go.CC_limma <- enrichGO(gene = GO_limma,\n                              OrgDb = org.Hs.eg.db,\n                              keyType = \"ENTREZID\",\n                              ont = 'CC', # Cellular Component\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.CC.outdata_limma <- as.data.frame(erich.go.CC_limma)\n#write.csv(erich.go.CC.outdata, \"E:/fruit/erich.go.CC.outdata.csv\")\n\n#### KEGG Analysis ###\nkegg.out_limma <- enrichKEGG(gene = GO_limma,\n                              organism = \"hsa\",\n                              keyType = \"kegg\",\n                              pvalueCutoff = 0.05,\n                              pAdjustMethod = \"BH\",\n                              qvalueCutoff = 0.05)\nkegg.out.outdata_limma <- as.data.frame(kegg.out_limma)\n# Convert ENTREZ gene IDs or Ensembl gene IDs to symbols\nlibrary(org.Hs.eg.db)\nkegg.out1_limma = as.data.frame(kegg.out_limma)\nENTREZID = strsplit(kegg.out1_limma$geneID, \"/\")\nsymbol = sapply(ENTREZID, function(x) {\n  y = bitr(x, fromType=\"ENTREZID\", toType=\"SYMBOL\", OrgDb=\"org.Hs.eg.db\")\n  # For many-to-one mappings, pick the first\n  y = y[!duplicated(y$ENTREZID), -1]\n  y = paste(y, collapse = \"/\")\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\nkegg.out1_limma$geneID = symbol\nkegg.out1.outdata_limma <- as.data.frame(kegg.out1_limma)\n#write.csv(kegg.out1.outdata, \"E:/fruit/kegg.out1.outdata.csv\")\n\n###### Disease Ontology (DO) Analysis #####\nlibrary(DOSE)\nerich.go.DO_limma <- enrichDO(gene = GO_limma,\n                              ont = \"DO\", # Disease Ontology\n                              pvalueCutoff = 0.05,\n                              qvalueCutoff = 0.05,\n                              readable = TRUE)\nerich.go.DO.outdata_limma <- as.data.frame(erich.go.DO_limma)\n#write.csv(erich.go.DO.outdata, \"E:/fruit/erich.go.DO.outdata.csv\")\n\nlibrary(ReactomePA)\n##### Reactome Pathway Analysis #####\nerich.go.Reactome_limma <- enrichPathway(gene=GO_limma, pvalueCutoff=0.05, readable=TRUE)\nerich.go.Reactome.outdata_limma <- as.data.frame(erich.go.Reactome_limma)\n#write.csv(erich.go.Reactome.outdata, \"E:/fruit/erich.go.Reactome.outdata.csv\")\n```\n:::\n\n\n## Enrichment analysis for Diff_Wilcoxon\n\n::: {.cell}\n\n```{.r .cell-code}\n###### Enrichment analysis for Diff_Wilcoxon\n# Obtain a list of genes\ngene <- rownames(Diff_Wilcoxon)\n## Convert symbols to ENTREZ IDs\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\n## Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\ngene_df <- data.frame(logFC=Diff_Wilcoxon$log2foldChange, SYMBOL = rownames(Diff_Wilcoxon))\ngene_df <- merge(gene_df, gene, by=\"SYMBOL\")\nGO_Wilcoxon <- gene_df$ENTREZID\n###### This file only requires a column with gene names\n###################\n\n# GO Analysis for Biological Process (BP)\n# Conduct gene enrichment analysis\nerich.go.BP_Wilcoxon <- enrichGO(gene = GO_Wilcoxon,\n                                  OrgDb = org.Hs.eg.db,\n                                  keyType = \"ENTREZID\",\n                                  ont = 'BP', # Biological Process\n                                  pvalueCutoff = 0.05,\n                                  qvalueCutoff = 0.05,\n                                  readable = TRUE)\nerich.go.BP.outdata_Wilcoxon <- as.data.frame(erich.go.BP_Wilcoxon)\n#write.csv(erich.go.BP.outdata, \"E:/fruit/erich.go.BP.outdata.csv\")\n\n# GO Analysis for Molecular Function (MF)\n# Conduct gene enrichment analysis\nerich.go.MF_Wilcoxon <- enrichGO(gene = GO_Wilcoxon,\n                                  OrgDb = org.Hs.eg.db,\n                                  keyType = \"ENTREZID\",\n                                  ont = 'MF', # Molecular Function\n                                  pvalueCutoff = 0.05,\n                                  qvalueCutoff = 0.05,\n                                  readable = TRUE)\nerich.go.MF.outdata_Wilcoxon <- as.data.frame(erich.go.MF_Wilcoxon)\n#write.csv(erich.go.MF.outdata, \"E:/fruit/erich.go.MF.outdata.csv\")\n\n# GO Analysis for Cellular Component (CC)\n# Conduct gene enrichment analysis\nerich.go.CC_Wilcoxon <- enrichGO(gene = GO_Wilcoxon,\n                                  OrgDb = org.Hs.eg.db,\n                                  keyType = \"ENTREZID\",\n                                  ont = 'CC', # Cellular Component\n                                  pvalueCutoff = 0.05,\n                                  qvalueCutoff = 0.05,\n                                  readable = TRUE)\nerich.go.CC.outdata_Wilcoxon <- as.data.frame(erich.go.CC_Wilcoxon)\n#write.csv(erich.go.CC.outdata, \"E:/fruit/erich.go.CC.outdata.csv\")\n\n#### KEGG Analysis ###\nkegg.out_Wilcoxon <- enrichKEGG(gene = GO_Wilcoxon,\n                                organism = \"hsa\",\n                                keyType = \"kegg\",\n                                pvalueCutoff = 0.05,\n                                pAdjustMethod = \"BH\",\n                                qvalueCutoff = 0.05)\nkegg.out.outdata_Wilcoxon <- as.data.frame(kegg.out_Wilcoxon)\n# Convert ENTREZ gene IDs or Ensembl gene IDs to symbols\nlibrary(org.Hs.eg.db)\nkegg.out1_Wilcoxon = as.data.frame(kegg.out_Wilcoxon)\nENTREZID = strsplit(kegg.out1_Wilcoxon$geneID, \"/\")\nsymbol = sapply(ENTREZID, function(x) {\n  y = bitr(x, fromType=\"ENTREZID\", toType=\"SYMBOL\", OrgDb=\"org.Hs.eg.db\")\n  # For many-to-one mappings, pick the first\n  y = y[!duplicated(y$ENTREZID), -1]\n  y = paste(y, collapse = \"/\")\n})\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n'select()' returned 1:1 mapping between keys and columns\n```\n:::\n\n```{.r .cell-code}\nkegg.out1_Wilcoxon$geneID = symbol\nkegg.out1.outdata_Wilcoxon <- as.data.frame(kegg.out1_Wilcoxon)\n#write.csv(kegg.out1.outdata, \"E:/fruit/kegg.out1.outdata.csv\")\n\n###### Disease Ontology (DO) Analysis #####\nlibrary(DOSE)\nerich.go.DO_Wilcoxon <- enrichDO(gene = GO_Wilcoxon,\n                                  ont = \"DO\", # Disease Ontology\n                                  pvalueCutoff = 0.05,\n                                  qvalueCutoff = 0.05,\n                                  readable = TRUE)\nerich.go.DO.outdata_Wilcoxon <- as.data.frame(erich.go.DO_Wilcoxon)\n\n#####Reactome########\nerich.go.Reactome_Wilcoxon<-enrichPathway(gene=GO_Wilcoxon,pvalueCutoff=0.05, readable=T)\nerich.go.Reactome.outdata_Wilcoxon <- as.data.frame(erich.go.Reactome_Wilcoxon)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define list of data frames\ndf_list <- list(\n  erich.go.BP.outdata_deseq2,\n  erich.go.MF.outdata_deseq2,\n  erich.go.CC.outdata_deseq2,\n  kegg.out1.outdata_deseq2,\n  erich.go.DO.outdata_deseq2,\n  erich.go.Reactome.outdata_deseq2\n)\n\n# Method name, assuming all \"method\" columns should have the same name\nmethod_name <- \"deseq2\"\n\n# Call function to merge data frames\n#combined_df_deseq2 <- merge_dataframes_with_same_method(df_list, method_name)\n\ncolor_list <- c(\"#3f51b5\", \"#ffc107\", \"#4caf50\", \"#009688\", \"#ff9800\", \"#673ab7\") # Color values corresponding to df_list\n\n#combined_df <- merge_dataframes_with_same_method_and_color(df_list, method_name, color_list)\ncombined_df_deseq2 <- merge_method_color(df_list, method_name, color_list)\n\n\n# Define list of data frames\ndf_list <- list(\n  erich.go.BP.outdata_edgeR,\n  erich.go.MF.outdata_edgeR,\n  erich.go.CC.outdata_edgeR,\n  kegg.out1.outdata_edgeR,\n  erich.go.DO.outdata_edgeR,\n  erich.go.Reactome.outdata_edgeR\n)\n\n# Method name, assuming all \"method\" columns should have the same name\nmethod_name <- \"edgeR\"\ncolor_list <- c(\"#3f51b5\", \"#ffc107\", \"#4caf50\", \"#009688\", \"#ff9800\", \"#673ab7\")\n# Call function to merge data frames\n#combined_df_edgeR <- merge_dataframes_with_same_method(df_list, method_name)\ncombined_df_edgeR <- merge_method_color(df_list, method_name, color_list)\n\n\n# Define list of data frames\ndf_list <- list(\n  erich.go.BP.outdata_limma,\n  erich.go.MF.outdata_limma,\n  erich.go.CC.outdata_limma,\n  kegg.out1.outdata_limma,\n  erich.go.DO.outdata_limma,\n  erich.go.Reactome.outdata_limma\n)\n\n# Method name, assuming all \"method\" columns should have the same name\nmethod_name <- \"limma\"\ncolor_list <- c(\"#3f51b5\", \"#ffc107\", \"#4caf50\", \"#009688\", \"#ff9800\", \"#673ab7\")\n# Call function to merge data frames\n#combined_df_limma <- merge_dataframes_with_same_method(df_list, method_name)\ncombined_df_limma <- merge_method_color(df_list, method_name, color_list)\n\n\n# Define list of data frames\ndf_list <- list(\n  erich.go.BP.outdata_Wilcoxon,\n  erich.go.MF.outdata_Wilcoxon,\n  erich.go.CC.outdata_Wilcoxon,\n  kegg.out1.outdata_Wilcoxon,\n  erich.go.DO.outdata_Wilcoxon,\n  erich.go.Reactome.outdata_Wilcoxon\n)\n\n# Method name, assuming all \"method\" columns should have the same name\nmethod_name <- \"Wilcoxon\"\ncolor_list <- c(\"#3f51b5\", \"#ffc107\", \"#4caf50\", \"#009688\", \"#ff9800\", \"#673ab7\")\n# Call function to merge data frames\n#combined_df_Wilcoxon <- merge_dataframes_with_same_method(df_list, method_name)\ncombined_df_Wilcoxon <- merge_method_color(df_list, method_name, color_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use this function to merge four different data frames that have common row names and add an id column to each data frame\ndf_list <- list(\n  combined_df_deseq2,\n  combined_df_edgeR,\n  combined_df_limma,\n  combined_df_Wilcoxon\n)\n\n# Define a function to count the number of words in a description\ncount_words <- function(description) {\n  length(strsplit(description, \"\\\\s+\")[[1]])\n}\n\n# Define a function to filter the data frame so that it only includes rows with no more than 8 words\nfilter_descriptions <- function(df) {\n  df %>%\n    filter(sapply(Description, count_words) <= 8)\n}\n\n# Apply this function to each data frame in the list\nfiltered_df_list <- lapply(df_list, filter_descriptions)\nsummary(filtered_df_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Length Class      Mode\n[1,] 4      data.frame list\n[2,] 4      data.frame list\n[3,] 4      data.frame list\n[4,] 4      data.frame list\n```\n:::\n:::\n\n\n## Pre_data\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_combined_df_with_id_and_position <- merge_id_position(filtered_df_list)\nhighlight_ids <- c(3,9,12, 20, 25, 33,36,42)\npal = c( \"#5c6bc0\", \"#7e57c2\",\"#9ccc65\",\"#ffca28\")\nenrich_polar_bubble(final_combined_df_with_id_and_position, pal, highlight_ids)\n```\n\n::: {.cell-output-display}\n![](EnrichPolarBubble_files/figure-html/unnamed-chunk-10-1.png){width=100%}\n:::\n:::\n\n\n\n## Reference\n>\n> - **ggplot2**:\n> \n>><a href=\"https://github.com/tidyverse/ggplot2\" style=\"color: #758b76; font-weight: bold;\">github:ggplot2</a>\n>>\n>><a href=\"https://ggplot2.tidyverse.org/\" style=\"color: #758b76; font-weight: bold;\">An implementation of the Grammar of Graphics in R</a>\n>\n> - **ggtreeExtra**:\n> \n>><a href=\"https://doi.org/10.1093/molbev/msab166\" style=\"color: #758b76; font-weight: bold;\">S Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L Zhan, T Wu, E Hu, Y Jiang*, X Bo* and G Yu*. ggtreeExtra: Compact visualization of richly annotated phylogenetic data. Molecular Biology and Evolution. 2021, 38(9):4039-4042. </a>\n>\n> - **ggtree**:\n> \n>><a href=\"https://doi.org/10.1111/2041-210X.12628\" style=\"color: #758b76; font-weight: bold;\">G Yu, DK Smith, H Zhu, Y Guan, TTY Lam*. ggtree: an R package for visualization and annotation of phylogenetic trees with their covariates and other associated data. Methods in Ecology and Evolution. 2017, 8(1):28-36.</a>\n>\n> - **clusterProfiler 4.0**:\n> \n>><a href=\"https://doi.org/10.1016/j.xinn.2021.100141\" style=\"color: #758b76; font-weight: bold;\">T Wu#, E Hu#, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo*, G Yu*. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141. </a>\n> ",
    "supporting": [
      "EnrichPolarBubble_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}