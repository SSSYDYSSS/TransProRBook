{
  "hash": "614f81654e67a6fee7ae3f647a9eda54",
  "result": {
    "markdown": "# Enrichment Spiralize\n\n::: {.callout-note}\nThe spiral plots generated by this module provide an intuitive visual display, depicting the expression changes in different biological pathways across samples through gradient colors and spatial arrangement. This visualization method helps to more clearly identify and compare the activity differences in key pathways, thereby deepening the understanding of physiological mechanisms.\n:::\n\n\n\n\n\n\n```r \nlibrary(TransProR)\nlibrary(org.Hs.eg.db)\nlibrary(clusterProfiler)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(GSVA)\nlibrary(msigdbr)\nlibrary(scales)\n```\n\n\n\n\n## load data\n\n::: {.cell}\n\n```{.r .cell-code}\ntumor <- readRDS(\"../test_TransProR/generated_data1/removebatch_SKCM_Skin_TCGA_exp_tumor.rds\")\nnormal <- readRDS('../test_TransProR/generated_data1/removebatch_SKCM_Skin_Normal_TCGA_GTEX_count.rds')\n# Merge the datasets, ensuring both have genes as row names\nall_count_exp <- merge(tumor, normal, by = \"row.names\")\nall_count_exp <- tibble::column_to_rownames(all_count_exp, var = \"Row.names\")  # Set the row names\n\n# Drawing data\n# all_count_exp <- log_transform(all_count_exp)\nDEG_deseq2 <- readRDS('../test_TransProR/Select DEGs/DEG_deseq2.Rdata')\n#head(all_count_exp, 1)\nhead(DEG_deseq2, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          baseMean log2FoldChange      lfcSE      stat pvalue padj change\nA1BG      134.6084      -2.549682 0.05677219 -44.91075      0    0   down\nA2M     30208.9912       3.251168 0.08394645  38.72907      0    0     up\nAADACL2   801.4538      -8.229956 0.18969649 -43.38486      0    0   down\nAARS2    1153.5493       1.624753 0.03283522  49.48202      0    0 stable\nAARSD1    567.8672      -2.082289 0.02275703 -91.50088      0    0 stable\n```\n:::\n:::\n\n\n## Convert from SYMBOL to ENTREZID\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert from SYMBOL to ENTREZID for convenient enrichment analysis later. It's crucial to do this now as a direct conversion may result in a reduced set of genes due to non-one-to-one correspondence.\n\n# DEG_deseq2\n# Retrieve gene list\ngene <- rownames(DEG_deseq2)\n# Perform conversion\ngene = bitr(gene, fromType=\"SYMBOL\", toType=\"ENTREZID\", OrgDb=\"org.Hs.eg.db\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'select()' returned 1:many mapping between keys and columns\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in bitr(gene, fromType = \"SYMBOL\", toType = \"ENTREZID\", OrgDb =\n\"org.Hs.eg.db\"): 43.37% of input gene IDs are fail to map...\n```\n:::\n\n```{.r .cell-code}\n# Remove duplicates and merge\ngene <- dplyr::distinct(gene, SYMBOL, .keep_all=TRUE)\n# Extract the SYMBOL column as a vector from the first dataset\nsymbols_vector <- gene$SYMBOL\n# Use the SYMBOL column to filter corresponding rows from the second dataset by row names\nDEG_deseq2 <- DEG_deseq2[rownames(DEG_deseq2) %in% symbols_vector, ]\nhead(DEG_deseq2, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          baseMean log2FoldChange      lfcSE      stat pvalue padj change\nA1BG      134.6084      -2.549682 0.05677219 -44.91075      0    0   down\nA2M     30208.9912       3.251168 0.08394645  38.72907      0    0     up\nAADACL2   801.4538      -8.229956 0.18969649 -43.38486      0    0   down\nAARS2    1153.5493       1.624753 0.03283522  49.48202      0    0 stable\nAARSD1    567.8672      -2.082289 0.02275703 -91.50088      0    0 stable\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDiff_deseq2 <- filter_diff_genes(\n  DEG_deseq2, \n  p_val_col = \"pvalue\", \n  log_fc_col = \"log2FoldChange\",\n  p_val_threshold = 0.05, \n  log_fc_threshold = 3\n)\n# First, obtain a list of gene names from the row names of the first dataset\ngene_names <- rownames(Diff_deseq2)\n# Find the matching rows in the second dataframe\nmatched_rows <- all_count_exp[gene_names, ]\n# Calculate the mean for each row\naverages <- rowMeans(matched_rows, na.rm = TRUE)\n# Append the averages as a new column to the first dataframe\nDiff_deseq2$average <- averages\nDiff_deseq2$ID <- rownames(Diff_deseq2)\nDiff_deseq2$changetype <- ifelse(Diff_deseq2$change == 'up', 1, -1)\n# Define a small threshold value\nsmall_value <- .Machine$double.xmin\n# Before calculating -log10, replace zeroes with the small threshold value and assign it to a new column\nDiff_deseq2$log_pvalue <- ifelse(Diff_deseq2$pvalue == 0, -log10(small_value), -log10(Diff_deseq2$pvalue))\n# Extract the expression data corresponding to the differentially expressed genes\nheatdata_deseq2 <- all_count_exp[rownames(Diff_deseq2), ]\n\nset.seed(123)\n# Preparing heatdata for visualization\nHeatdataDeseq2 <- TransProR::process_heatdata(heatdata_deseq2, \n                                              selection = 2, \n                                              custom_names = NULL, \n                                              num_names_per_group = 3, \n                                              prefix_length = 4)\nHeatdataDeseq2 <- as.matrix(HeatdataDeseq2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Using the msigdbr package to download and prepare for GSVA analysis with KEGG and GO gene sets\n## KEGG\nKEGG_df_all <- msigdbr(species = \"Homo sapiens\", # Homo sapiens or Mus musculus\n                        category = \"C2\",\n                        subcategory = \"CP:KEGG\") \nKEGG_df <- dplyr::select(KEGG_df_all, gs_name, gs_exact_source, gene_symbol)\nkegg_list <- split(KEGG_df$gene_symbol, KEGG_df$gs_name) # Grouping gene symbols by gs_name\nhead(kegg_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$KEGG_ABC_TRANSPORTERS\n [1] \"ABCA1\"  \"ABCA10\" \"ABCA12\" \"ABCA13\" \"ABCA2\"  \"ABCA3\"  \"ABCA4\"  \"ABCA5\" \n [9] \"ABCA6\"  \"ABCA7\"  \"ABCA8\"  \"ABCA9\"  \"ABCB1\"  \"ABCB10\" \"ABCB11\" \"ABCB11\"\n[17] \"ABCB4\"  \"ABCB5\"  \"ABCB6\"  \"ABCB7\"  \"ABCB8\"  \"ABCB9\"  \"ABCC1\"  \"ABCC1\" \n[25] \"ABCC10\" \"ABCC11\" \"ABCC12\" \"ABCC2\"  \"ABCC3\"  \"ABCC4\"  \"ABCC5\"  \"ABCC6\" \n[33] \"ABCC6\"  \"ABCC8\"  \"ABCC9\"  \"ABCD1\"  \"ABCD2\"  \"ABCD3\"  \"ABCD4\"  \"ABCG1\" \n[41] \"ABCG2\"  \"ABCG4\"  \"ABCG5\"  \"ABCG8\"  \"CFTR\"   \"TAP1\"   \"TAP1\"   \"TAP1\"  \n[49] \"TAP1\"   \"TAP1\"   \"TAP1\"   \"TAP1\"   \"TAP1\"   \"TAP2\"   \"TAP2\"   \"TAP2\"  \n[57] \"TAP2\"   \"TAP2\"   \"TAP2\"   \"TAP2\"   \"TAP2\"  \n\n$KEGG_ACUTE_MYELOID_LEUKEMIA\n [1] \"AKT1\"     \"AKT2\"     \"AKT3\"     \"AKT3\"     \"ARAF\"     \"BAD\"     \n [7] \"BRAF\"     \"CCNA1\"    \"CCND1\"    \"CEBPA\"    \"CHUK\"     \"EIF4EBP1\"\n[13] \"FLT3\"     \"GRB2\"     \"HRAS\"     \"HRAS\"     \"IKBKB\"    \"IKBKG\"   \n[19] \"JUP\"      \"KIT\"      \"KRAS\"     \"LEF1\"     \"MAP2K1\"   \"MAP2K2\"  \n[25] \"MAPK1\"    \"MAPK3\"    \"MTOR\"     \"MYC\"      \"NFKB1\"    \"NRAS\"    \n[31] \"PIK3CA\"   \"PIK3CB\"   \"PIK3CD\"   \"PIK3CG\"   \"PIK3R1\"   \"PIK3R2\"  \n[37] \"PIK3R3\"   \"PIK3R5\"   \"PIM1\"     \"PIM2\"     \"PML\"      \"PPARD\"   \n[43] \"RAF1\"     \"RARA\"     \"RELA\"     \"RPS6KB1\"  \"RPS6KB2\"  \"RUNX1\"   \n[49] \"RUNX1T1\"  \"SOS1\"     \"SOS2\"     \"SPI1\"     \"STAT3\"    \"STAT5A\"  \n[55] \"STAT5B\"   \"TCF7\"     \"TCF7L1\"   \"TCF7L2\"   \"ZBTB16\"  \n\n$KEGG_ADHERENS_JUNCTION\n [1] \"ACP1\"    \"ACTB\"    \"ACTG1\"   \"ACTN1\"   \"ACTN2\"   \"ACTN3\"   \"ACTN4\"  \n [8] \"ACTN4\"   \"AFDN\"    \"BAIAP2\"  \"CDC42\"   \"CDH1\"    \"CREBBP\"  \"CSNK2A1\"\n[15] \"CSNK2A2\" \"CSNK2B\"  \"CSNK2B\"  \"CSNK2B\"  \"CSNK2B\"  \"CSNK2B\"  \"CSNK2B\" \n[22] \"CSNK2B\"  \"CSNK2B\"  \"CTNNA1\"  \"CTNNA2\"  \"CTNNA3\"  \"CTNNB1\"  \"CTNND1\" \n[29] \"EGFR\"    \"EP300\"   \"ERBB2\"   \"FARP2\"   \"FER\"     \"FGFR1\"   \"FYN\"    \n[36] \"IGF1R\"   \"INSR\"    \"IQGAP1\"  \"LEF1\"    \"LMO7\"    \"MAP3K7\"  \"MAPK1\"  \n[43] \"MAPK3\"   \"MET\"     \"NECTIN1\" \"NECTIN2\" \"NECTIN3\" \"NECTIN4\" \"NLK\"    \n[50] \"PARD3\"   \"PTPN1\"   \"PTPN6\"   \"PTPRB\"   \"PTPRF\"   \"PTPRJ\"   \"PTPRM\"  \n[57] \"RAC1\"    \"RAC2\"    \"RAC3\"    \"RHOA\"    \"SMAD2\"   \"SMAD3\"   \"SMAD4\"  \n[64] \"SNAI1\"   \"SNAI2\"   \"SORBS1\"  \"SRC\"     \"SSX2IP\"  \"TCF7\"    \"TCF7L1\" \n[71] \"TCF7L2\"  \"TGFBR1\"  \"TGFBR2\"  \"TJP1\"    \"TJP1\"    \"VCL\"     \"WAS\"    \n[78] \"WASF1\"   \"WASF2\"   \"WASF3\"   \"WASL\"    \"YES1\"   \n\n$KEGG_ADIPOCYTOKINE_SIGNALING_PATHWAY\n [1] \"ACACB\"    \"ACSL1\"    \"ACSL3\"    \"ACSL4\"    \"ACSL5\"    \"ACSL6\"   \n [7] \"ADIPOQ\"   \"ADIPOR1\"  \"ADIPOR2\"  \"ADIPOR2\"  \"AGRP\"     \"AKT1\"    \n[13] \"AKT2\"     \"AKT3\"     \"AKT3\"     \"CAMKK1\"   \"CAMKK2\"   \"CD36\"    \n[19] \"CHUK\"     \"CPT1A\"    \"CPT1B\"    \"CPT1C\"    \"G6PC1\"    \"G6PC2\"   \n[25] \"G6PC2\"    \"IKBKB\"    \"IKBKG\"    \"IRS1\"     \"IRS2\"     \"IRS4\"    \n[31] \"JAK2\"     \"LEP\"      \"LEPR\"     \"MAPK10\"   \"MAPK8\"    \"MAPK9\"   \n[37] \"MTOR\"     \"NFKB1\"    \"NFKBIA\"   \"NFKBIB\"   \"NFKBIB\"   \"NFKBIE\"  \n[43] \"NPY\"      \"PCK1\"     \"PCK2\"     \"PCK2\"     \"POMC\"     \"PPARA\"   \n[49] \"PPARGC1A\" \"PRKAA1\"   \"PRKAA2\"   \"PRKAB1\"   \"PRKAB2\"   \"PRKAG1\"  \n[55] \"PRKAG2\"   \"PRKAG3\"   \"PRKCQ\"    \"PTPN11\"   \"RELA\"     \"RXRA\"    \n[61] \"RXRB\"     \"RXRB\"     \"RXRB\"     \"RXRB\"     \"RXRB\"     \"RXRB\"    \n[67] \"RXRG\"     \"SLC2A1\"   \"SLC2A4\"   \"SLC2A4\"   \"SOCS3\"    \"STAT3\"   \n[73] \"STK11\"    \"TNF\"      \"TNF\"      \"TNF\"      \"TNF\"      \"TNF\"     \n[79] \"TNF\"      \"TNF\"      \"TNF\"      \"TNFRSF1A\" \"TNFRSF1B\" \"TRADD\"   \n[85] \"TRAF2\"   \n\n$KEGG_ALANINE_ASPARTATE_AND_GLUTAMATE_METABOLISM\n [1] \"ABAT\"    \"ACY3\"    \"ADSL\"    \"ADSS1\"   \"ADSS2\"   \"AGXT\"    \"AGXT2\"  \n [8] \"ALDH4A1\" \"ALDH5A1\" \"ASL\"     \"ASNS\"    \"ASPA\"    \"ASS1\"    \"CAD\"    \n[15] \"CPS1\"    \"DDO\"     \"GAD1\"    \"GAD2\"    \"GFPT1\"   \"GFPT2\"   \"GLS\"    \n[22] \"GLS2\"    \"GLUD1\"   \"GLUD2\"   \"GLUD2\"   \"GLUL\"    \"GOT1\"    \"GOT2\"   \n[29] \"GPT\"     \"GPT2\"    \"IL4I1\"   \"NIT2\"    \"PPAT\"   \n\n$KEGG_ALDOSTERONE_REGULATED_SODIUM_REABSORPTION\n [1] \"ATP1A1\"   \"ATP1A2\"   \"ATP1A3\"   \"ATP1A4\"   \"ATP1B1\"   \"ATP1B2\"  \n [7] \"ATP1B3\"   \"ATP1B4\"   \"FXYD2\"    \"FXYD4\"    \"HSD11B1\"  \"HSD11B2\" \n[13] \"IGF1\"     \"INS\"      \"INSR\"     \"IRS1\"     \"IRS2\"     \"IRS4\"    \n[19] \"KCNJ1\"    \"KRAS\"     \"MAPK1\"    \"MAPK3\"    \"NEDD4L\"   \"NR3C2\"   \n[25] \"PDPK1\"    \"PIK3CA\"   \"PIK3CB\"   \"PIK3CD\"   \"PIK3CG\"   \"PIK3R1\"  \n[31] \"PIK3R2\"   \"PIK3R3\"   \"PIK3R5\"   \"PRKCA\"    \"PRKCB\"    \"PRKCG\"   \n[37] \"SCNN1A\"   \"SCNN1B\"   \"SCNN1G\"   \"SFN\"      \"SGK1\"     \"SLC9A3R2\"\n```\n:::\n\n```{.r .cell-code}\n## GO\nGO_df_all <- msigdbr(species = \"Homo sapiens\",\n                      category = \"C5\")  \nGO_df <- dplyr::select(GO_df_all, gs_name, gene_symbol, gs_exact_source, gs_subcat)\nGO_df <- GO_df[GO_df$gs_subcat != \"HPO\",]\ngo_list <- split(GO_df$gene_symbol, GO_df$gs_name) # Grouping gene symbols by gs_name\nhead(go_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$GOBP_10_FORMYLTETRAHYDROFOLATE_METABOLIC_PROCESS\n[1] \"AASDHPPT\" \"ALDH1L1\"  \"ALDH1L2\"  \"MTHFD1\"   \"MTHFD1L\"  \"MTHFD2L\" \n\n$GOBP_2_OXOGLUTARATE_METABOLIC_PROCESS\n [1] \"AADAT\"  \"ADHFE1\" \"D2HGDH\" \"DLST\"   \"GOT1\"   \"GOT2\"   \"GPT2\"   \"IDH1\"  \n [9] \"IDH2\"   \"IDH3B\"  \"KYAT3\"  \"L2HGDH\" \"MRPS36\" \"MRPS36\" \"OGDH\"   \"OGDHL\" \n[17] \"PHYH\"   \"TAT\"   \n\n$GOBP_2FE_2S_CLUSTER_ASSEMBLY\n[1] \"BOLA2\"  \"BOLA2B\" \"GLRX3\"  \"GLRX5\"  \"HSCB\"   \"NFS1\"  \n\n$GOBP_3_PHOSPHOADENOSINE_5_PHOSPHOSULFATE_BIOSYNTHETIC_PROCESS\n[1] \"PAPSS1\"  \"PAPSS2\"  \"SLC26A1\" \"SLC26A2\" \"SLC35B2\" \"SLC35B3\"\n\n$GOBP_3_PHOSPHOADENOSINE_5_PHOSPHOSULFATE_METABOLIC_PROCESS\n [1] \"ABHD14B\" \"BPNT1\"   \"ENPP1\"   \"PAPSS1\"  \"PAPSS2\"  \"SLC26A1\" \"SLC26A2\"\n [8] \"SLC35B2\" \"SLC35B3\" \"SULT1A1\" \"SULT1A2\" \"SULT1A3\" \"SULT1A4\" \"SULT1B1\"\n[15] \"SULT1C3\" \"SULT1C4\" \"SULT1E1\" \"SULT2A1\" \"SULT2B1\" \"TPST1\"   \"TPST2\"  \n\n$GOBP_3_UTR_MEDIATED_MRNA_DESTABILIZATION\n [1] \"CPEB3\"   \"DHX36\"   \"DHX36\"   \"DND1\"    \"DND1\"    \"HNRNPD\"  \"KHSRP\"  \n [8] \"MOV10\"   \"PLEKHN1\" \"RBM24\"   \"RC3H1\"   \"TARDBP\"  \"TRIM71\"  \"UPF1\"   \n[15] \"ZC3H12A\" \"ZC3H12D\" \"ZFP36\"   \"ZFP36L1\" \"ZFP36L2\"\n```\n:::\n\n```{.r .cell-code}\n#write.csv(gsva_mat, \"gsva_go_matrix.csv\")\n\nssgsea_kegg <- gsva(expr = HeatdataDeseq2, \n                    gset.idx.list = kegg_list, \n                    kcdf = \"Poisson\", #\"Gaussian\" for logCPM, logRPKM, logTPM, \"Poisson\" for counts\n                    method = \"ssgsea\",\n                    verbose = TRUE\n                    #parallel.sz = parallel::detectCores() # Utilize all available cores\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Calling gsva(expr=., gset.idx.list=., method=., ...) is deprecated;\nuse a method-specific parameter object (see '?gsva').\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in .filterFeatures(expr, method): 37 genes with constant expression\nvalues throughout the samples.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in .gsva(expr, mapped.gset.idx.list, method, kcdf, rnaseq, abs.ranking,\n: Some gene sets have size one. Consider setting 'min.sz > 1'.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nEstimating ssGSEA scores for 171 gene sets.\n[1] \"Calculating ranks...\"\n[1] \"Calculating absolute values from ranks...\"\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |======================================================================| 100%\n\n[1] \"Normalizing...\"\n```\n:::\n\n```{.r .cell-code}\nssgsea_kegg <- as.data.frame(ssgsea_kegg)\n```\n:::\n\n\n## set color\n\n::: {.cell}\n\n```{.r .cell-code}\nnTop = 5\nresults1 <- extract_ntop_pathways(ssgsea_kegg = ssgsea_kegg, nTop = nTop)\nresults2 <- extract_positive_pathways(ssgsea_kegg, max_paths_per_sample = 5)\n# Set the required number of transition colors\n\nnumber_of_colors <- nTop\n\n# Define start and end colors\nstart_color1 <- \"#fd8d63\"  \nend_color1 <- \"#ededed\"    \n# Use colorRampPalette to generate color transitions\ncolor_palette1 <- colorRampPalette(c(start_color1, end_color1))\ninterpolated_colors1 <- color_palette1(number_of_colors)\n\nstart_color2 <- \"#673ab7\"  \nend_color2 <- \"#d1c4e9\"    \ncolor_palette2 <- colorRampPalette(c(start_color2, end_color2))\ninterpolated_colors2 <- color_palette2(number_of_colors)\n\nstart_color3 <- \"#6ac1a7\"  \nend_color3 <- \"#ededed\"    \ncolor_palette3 <- colorRampPalette(c(start_color3, end_color3))\ninterpolated_colors3 <- color_palette3(number_of_colors)\n\nstart_color4 <- \"#2196f3\"  \nend_color4 <- \"#bbdefb\"    \ncolor_palette4 <- colorRampPalette(c(start_color4, end_color4))\ninterpolated_colors4 <- color_palette4(number_of_colors)\n\nstart_color5 <- \"#ffdb37\"  \nend_color5 <- \"#ededed\"    \ncolor_palette5 <- colorRampPalette(c(start_color5, end_color5))\ninterpolated_colors5 <- color_palette5(number_of_colors)\n\nstart_color6 <- \"#00bcd4\"  \nend_color6 <- \"#b2ebf2\"    \ncolor_palette6 <- colorRampPalette(c(start_color6, end_color6))\ninterpolated_colors6 <- color_palette6(number_of_colors)\n\nstart_color7 <- \"#a7da55\"  \nend_color7 <- \"#ededed\"    \ncolor_palette7 <- colorRampPalette(c(start_color7, end_color7))\ninterpolated_colors7 <- color_palette7(number_of_colors)\n\nstart_color8 <- \"#43a047\"  \nend_color8 <- \"#c8e6c9\"    \ncolor_palette8 <- colorRampPalette(c(start_color8, end_color8))\ninterpolated_colors8 <- color_palette8(number_of_colors)\n\nstart_color9 <- \"#e68bc1\"  \nend_color9 <- \"#ededed\"    \ncolor_palette9 <- colorRampPalette(c(start_color9, end_color9))\ninterpolated_colors9 <- color_palette9(number_of_colors)\n\nstart_color10 <- \"#cddc39\"  \nend_color10 <- \"#f0f4c3\"    \ncolor_palette10 <- colorRampPalette(c(start_color10, end_color10))\ninterpolated_colors10 <- color_palette10(number_of_colors)\n\nstart_color11 <- \"#8fa1cc\"  \nend_color11 <- \"#ededed\"    \ncolor_palette11 <- colorRampPalette(c(start_color11, end_color11))\ninterpolated_colors11 <- color_palette11(number_of_colors)\n\nstart_color12 <- \"#ff8f00\"  \nend_color12 <- \"#ffecb3\"    \ncolor_palette12 <- colorRampPalette(c(start_color12, end_color12))\ninterpolated_colors12 <- color_palette12(number_of_colors)\n\n# Print the resulting colors\nPathwaycolor2 <- c(interpolated_colors1, interpolated_colors3, interpolated_colors5, interpolated_colors7, interpolated_colors9, interpolated_colors11)\nprint(Pathwaycolor2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"#FD8D63\" \"#F9A585\" \"#F5BDA8\" \"#F1D5CA\" \"#EDEDED\" \"#6AC1A7\" \"#8ACCB8\"\n [8] \"#ABD7CA\" \"#CCE2DB\" \"#EDEDED\" \"#FFDB37\" \"#FADF64\" \"#F6E392\" \"#F1E8BF\"\n[15] \"#EDEDED\" \"#A7DA55\" \"#B8DE7B\" \"#CAE3A1\" \"#DBE8C7\" \"#EDEDED\" \"#E68BC1\"\n[22] \"#E7A3CC\" \"#E9BCD7\" \"#EBD4E2\" \"#EDEDED\" \"#8FA1CC\" \"#A6B3D4\" \"#BEC7DC\"\n[29] \"#D5DAE4\" \"#EDEDED\"\n```\n:::\n\n```{.r .cell-code}\nSamplecolor2 <- c(start_color1, start_color3, start_color5, start_color7, start_color9, start_color11)\nprint(Samplecolor2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#fd8d63\" \"#6ac1a7\" \"#ffdb37\" \"#a7da55\" \"#e68bc1\" \"#8fa1cc\"\n```\n:::\n\n```{.r .cell-code}\nresults1$PathwayColor <- Pathwaycolor2\nresults2$PathwayColor <- Pathwaycolor2\n# Create a color mapping for the Sample column\nSample_colors2 <- setNames(Samplecolor2, unique(results1$Sample))\nSample_colors2 <- setNames(Samplecolor2, unique(results2$Sample))\n# Add SampleColor column to the DataFrame\nresults1$SampleColor <- Sample_colors2[results1$Sample]\nresults2$SampleColor <- Sample_colors2[results2$Sample]\n# View the results\nprint(head(results1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                           Pathway Sample     Value\n1                       KEGG_RIBOFLAVIN_METABOLISM TCGA_1 0.5417180\n2                              KEGG_PRION_DISEASES TCGA_1 0.5324760\n3                     KEGG_BETA_ALANINE_METABOLISM TCGA_1 0.5187272\n4 KEGG_AMINO_SUGAR_AND_NUCLEOTIDE_SUGAR_METABOLISM TCGA_1 0.5169535\n5                        KEGG_LEISHMANIA_INFECTION TCGA_1 0.5003448\n6                       KEGG_RIBOFLAVIN_METABOLISM TCGA_2 0.5345860\n  PathwayColor SampleColor\n1      #FD8D63     #fd8d63\n2      #F9A585     #fd8d63\n3      #F5BDA8     #fd8d63\n4      #F1D5CA     #fd8d63\n5      #EDEDED     #fd8d63\n6      #6AC1A7     #6ac1a7\n```\n:::\n\n```{.r .cell-code}\nprint(head(results2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                                     Pathway Sample     Value PathwayColor\n1                    KEGG_ENDOMETRIAL_CANCER TCGA_1 0.4091193      #FD8D63\n2       KEGG_ARGININE_AND_PROLINE_METABOLISM TCGA_1 0.1608353      #F9A585\n3                 KEGG_RIBOFLAVIN_METABOLISM TCGA_1 0.5417180      #F5BDA8\n4            KEGG_NON_HOMOLOGOUS_END_JOINING TCGA_1 0.2218331      #F1D5CA\n5            KEGG_NON_SMALL_CELL_LUNG_CANCER TCGA_1 0.3934194      #EDEDED\n6 KEGG_PATHOGENIC_ESCHERICHIA_COLI_INFECTION TCGA_2 0.1543440      #6AC1A7\n  SampleColor\n1     #fd8d63\n2     #fd8d63\n3     #fd8d63\n4     #fd8d63\n5     #fd8d63\n6     #6ac1a7\n```\n:::\n:::\n\n\n\n## Sort\n\n::: {.cell}\n\n```{.r .cell-code}\nenrichment_spiral_plots(results1)\n```\n\n::: {.cell-output-display}\n![](Enrichment-Spiralize_files/figure-html/unnamed-chunk-6-1.png){width=100%}\n:::\n:::\n\n\n## Random\n\n::: {.cell}\n\n```{.r .cell-code}\nenrichment_spiral_plots(results2)\n```\n\n::: {.cell-output-display}\n![](Enrichment-Spiralize_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n:::\n\n\n\n## Reference\n> - **spiralize**:\n>\n>> <a href=\"https://doi.org/10.1093/bioinformatics/btab778\" style=\"color: #758b76; font-weight: bold;\">Zuguang Gu, et al., spiralize: an R package for Visualizing Data on Spirals, Bioinformatics, 2021.</a>\n>>\n>\n> - **ComplexHeatmap**:\n> \n>><a href=\"https://academic.oup.com/bioinformatics/article/32/18/2847/1743594\" style=\"color: #758b76; font-weight: bold;\">Complex heatmaps reveal patterns and correlations in multidimensional genomic data</a>\n>>\n>><a href=\"https://onlinelibrary.wiley.com/doi/10.1002/imt2.43\" style=\"color: #758b76; font-weight: bold;\">Complex heatmap visualization</a>\n>\n> - **ggplot2**:\n> \n>><a href=\"https://github.com/tidyverse/ggplot2\" style=\"color: #758b76; font-weight: bold;\">github:ggplot2</a>\n>>\n>><a href=\"https://ggplot2.tidyverse.org/\" style=\"color: #758b76; font-weight: bold;\">An implementation of the Grammar of Graphics in R</a>\n>\n",
    "supporting": [
      "Enrichment-Spiralize_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}